%
% Assignment 1c for CS3530 Computational Theory:
% Finite Automata
% Fall 2017
%
% Problems taken from Sipser
%

\documentclass{article}

\usepackage[margin=1in]{geometry}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{ae,aecompl}
\usepackage{emp,ifpdf}
\usepackage{graphicx}

\ifpdf\DeclareGraphicsRule{*}{mps}{*}{}\fi

\empprelude{input boxes; input theory}

% skip for paragraphs, don't indent
\addtolength{\parskip}{0.5\baselineskip}
\parindent=0pt

\begin{document}
\begin{empfile}

\begin{center}
\textbf{\Large CS 3530: Assignment 1c} \\[2mm]
Fall 2017
\end{center}

\raggedright

\section*{Exercise 1.15 (6 points)}

\subsection*{Problem}

Give a counterexample to show that the following construction fails
to prove Theorem~1.49, the closure of the class of regular languages
under the star operation.%
\footnote{In other words, you must present a finite automaton,
$N_1$, for which the constructed automaton $N$ does not recognize
the star of $N_1$'s language.}
Let $N_1=(Q_1,\Sigma,\delta_1,q_1,F_1)$ recognize $A_1$. Construct
$N=(Q_1,\Sigma,\delta,q_1,F)$ as follows. $N$ is supposed to
recognize $A^*_1$.

\begin{enumerate}
\renewcommand{\labelenumi}{\alph{enumi}}
\item The states of $N$ are the states of $N_1$.
\item The start state of $N$ is the same as the start state of $N_1$.
\item $F=\{q_1\}\cup F_1$.

The accept states $F$ are the old accept states plus its start state.
\item Define $\delta$ so that for any $q\in Q$ and any
$a\in\Sigma_\varepsilon$,
$$
\delta(q,a)=
\begin{cases}
\delta_1(q,a) & q\notin F_1\text{ or }a\neq\varepsilon \\
\delta_1(q,a)\cup\{q_1\} & q\in F_1\text{ and }a=\varepsilon.
\end{cases}
$$
\end{enumerate}
(Suggestion: Show this construction graphically, as in Figure~1.50.)

\subsection*{Solution}
    \newcommand{\mystar}{{\fontfamily{lmr}\selectfont$\star$}}

     
 Lets  	$A$= $\left\{(00)^* 1 \right\}$
 
\begin{emp}(0,0)

  t := 2cm;
  node.q0("0"); q0.c = origin;
  node.q1("1"); q1.c = q0.c + (t,0);
node.q2("2"); q2.c = q0.c + (0,-t);
  makestart(q0);
  makefinal(q1);
  % draw the nodes
  drawboxed(q0,q1,q2);
  
  edge(q0,q2,curve,ONE);
  edge(q2,q0,curve,ONE);
  edge(q0,q1,2,ZERO);


\end{emp}

Following the construction method of an Finite Stae Automata, Which is  $N=(Q_1,\Sigma,\delta,q_1,F)$
\newline
 The states of $N$ are the states of $N_1$.
 The states of $N$ and $N_1$ are $\left\{0,1,2\right\}$

The start state of $N$ is the same as the start state of $N_1$.  $F=\{q_1\}\cup F_1$.
\newline
The start state of both $N$ and $N_1$ are $\left\{0\right\}$

The accept states $F$ are the old accept states plus its start state.

 $F$ accept states and start states are 0 and 1, which means $F=\{q_1\}\cup F_1$.

 Define $\delta$ so that for any $q\in Q$ and any
$a\in\Sigma_\varepsilon$,

Since we have to union our accept state with $q_0$ would give us this $\delta$.
\begin{table}
\centering
\caption{$\delta$}
\label{}
\begin{tabular}{lllll}
 $\delta$  & 0 & 1 & $\varepsilon$ &  \\
$q_0$ & 1 & 2 & 0 &  \\
$q_1$ &  $\emptyset$   &  $\emptyset$  & 1 &  \\
$q_2$ & 0 & $\emptyset$   & 1 & 
\end{tabular}
\end{table}
\newline\newline\newline

Make our final Finite Stae Automata as follows:

\begin{emp}(0,0)
  t := 2cm;
  node.q0("0"); q0.c = origin;
  node.q1("1"); q1.c = q0.c + (t,0);
node.q2("2"); q2.c = q0.c + (0,-t);
  makestart(q0);
  makefinal(q1,q0);
  % draw the nodes
  drawboxed(q0,q1,q2);
  
  edge(q0,q2,curve,ONE);
  edge(q2,q0,curve,ONE);
  edge(q0,q1,2,ZERO);
  edge(q1,q0,-65,E);
\end{emp}

The finite automata adds $q_0$ to the accept states $N$, and that drifts away from the orginal automata, adding new strings with $\varepsilon$ to the machine.

\section*{Problem 1.60 (7 points)}

\subsection*{Problem}

Let $\Sigma=\{a,b\}$. For each $k\geq 1$, let $C_k$ be the language
consisting of all strings that contain an $a$ exactly $k$ places
from the right-hand end. Thus $C_k=\Sigma^*a\Sigma^{k-1}$. Describe
an NFA with $k+1$ states that recognizes $C_k$, both in terms of a
state diagram and a formal description.

\subsection*{Solution}


\begin{emp}(0,0)
  t := 2cm;
  node.q0("q0"); q0.c = origin;
  node.q1("q1"); q1.c = q0.c + (t,0);
node.q2("q2"); q2.c = q0.c + (2t,0);

node.q3(btex $q_k$ etex); q3.c = q0.c + (4t,0);
  makestart(q0);
  makefinal(q3);
  % draw the nodes
  drawboxed(q0,q1,q2,q3);
  
loop(q0,up, AB);
  edge(q0,q1,2,A);
    edge(q1,q2,2,AB);

  
      dashededges;
      edge(q2,q3,2,AB);
\end{emp}


The formal description of NFA.
$N=(Q_1,\Sigma,\delta,q_1,F)$

 $\Sigma=\{a,b\}$. 

$Q$= set of States = $\left\{ q1,q2,q3,q4,q5,q6,q7....q_k \right\}$ , where $k$ is the position of A to the left of it.

Let  $\Sigma=\{a,b\}$ and $q_0$ = $\left\{ q0 \right\}$. and $F$ = $\left\{ q_k \right\}$.

Lastly we do the $\delta$ in the defintion of the NFA.

\begin{table}
\end{table}
\begin{table}
\begin{tabular}{|l|l|l|l|}
\hline
~ & A & B & E \\ \hline
$q_0$ & $q_0$,$q_1$ & $q_1$ & $\emptyset$ ~ \\ 
$q_1$ & $q_2$ & $q_2$ & $\emptyset$ ~ \\ 
$q_2$ & $q_3$ & $q_3$ & $\emptyset$ ~ \\ 
$q_k$ & $q_k$+1 & $q_k$+1 & $\emptyset$ ~ \\
\hline
\end{tabular}
\end{table}



\section*{Problem 1.62 (7 points)}

\subsection*{Problem}

Let $\Sigma=\{a,b\}$. For each $k\geq 1$, let $D_k$ be the language
consisting of all strings that have at least one $a$ among the last
$k$ symbols. Thus $D_k=\Sigma^*a(\Sigma\cup\varepsilon)^{k-1}$.
Describe a DFA with at most $k+1$ states that recognizes $D_k$, both
in terms of a state diagram and a formal description.

\subsection*{Solution}
Language in regualr expression $D_k=\Sigma^*a(\Sigma\cup\varepsilon)^{k-1}$, and that means a laguage that consists from alphabet a and b. that at least one a amoung the last k states. The formal defintion of a DFA is   $M=(Q_1,\Sigma,\delta,q_1,F)$

\begin{emp}(0,0)
solidedges;
  t := 2cm;
  node.q0("q1"); q0.c = origin;
  node.q1("q2"); q1.c = q0.c + (t,0);
node.q2("q3"); q2.c = q0.c + (2t,0);

node.q3(btex $q_k$ etex); q3.c = q0.c + (4t,0);
  makestart(q0);
  makefinal(q1,q2,q3);
  % draw the nodes
  drawboxed(q0,q1,q2,q3);
  
loop(q0,up, B);
  edge(q0,q1,2,A);
    edge(q1,q2,2,AB);

  
      dashededges;
      edge(q2,q3,2,AB);
\end{emp}


$\Sigma=\{a,b\}$. 

$Q$= set of States = $\left\{ q_1,q_2,q_3,q_4,q_5,q_6,q_7....q_k \right\}$
 and $q_1$ = $\left\{ q_1 \right\}$. 
 
 and $F$ = $\left\{ q_2,q_3,q_4,q_5,q_k \right\}$.
 
 Lastly we do the $\delta$ in the defintion of the DFA.

\begin{tabular}{c c c c}
\hline
~ & A & B \\ \hline
$q_1$ & $q_2$ & $q_1$ \\ 
$q_2$ & $q_3$ & $q_3$ \\ 
$q_3$ & $q_4$ & $q_4$ \\ 
$q_k$ & $q_k+1$ & $q_k+1$ \\
\hline

\end{tabular}


\end{empfile}

\immediate\write18{mpost -tex=latex \jobname}
\end{document}
